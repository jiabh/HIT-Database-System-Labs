interface Serializable
{
    +load(istream): int
    +dump(ostream): int
}

class Record
{
    -key: int
    -data: char[12]
    +getter()
    +operator_cmp()
    +operator=()
}

interface AbstractBlock
{
    __
    +load(istream): int
    +dump(ostream): int
    ..
    +count(): size_t
    +setCount(num): size_t
    +size(): size_t
    +operator[](i): Record&
}

class Block
{
    -cnt: size_t
    -size: size_t
    -record_array: Record[size]
}

class BlockDecorator
{
    #block: AbstractBlock
}

class SortableBlock
{
    +sort(): void
}

interface PopOnlyStack<T>
{
    +top(): T
    +pop(): void
    +empty(): bool
}

class IterableBlock
{
    #m_top_index: size_t
    __
    +top(): Record
    +pop(): void
    +empty(): bool
    ..
    +count(): size_t
}

class BlockStream
{
    -in: istream&
    __
    +pop(): void
}
note bottom of BlockStream
    可以从流中自动载入
    内存块的IterableBlock
endnote

class LoserTree
{
    -k: int
    -tree: int
    -ib_array: IterableBlock[k]
    __
    +top(): Record
    +pop(): void
    +empty(): bool
    ..
    -build()
    -adjust(index)
}

Serializable <|.. Record
Serializable <|-- AbstractBlock
AbstractBlock <|.. BlockDecorator
AbstractBlock <-- BlockDecorator

BlockDecorator <|-- SortableBlock
BlockDecorator <|- IterableBlock
IterableBlock <|- BlockStream

Record <. AbstractBlock
AbstractBlock <|.. Block

PopOnlyStack <|.. IterableBlock
PopOnlyStack <|.. LoserTree

Record -o Block
LoserTree o-- IterableBlock
